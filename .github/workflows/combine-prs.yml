name: "Combine PRs"

# Controls when the action will run - in this case triggered manually
on:
  workflow_dispatch:
    inputs:
      branchPrefix:
        description: "Branch prefix to find combinable PRs based on"
        required: true
        default: "dependabot"
  pull_request:
    types:
      - opened
    branches: -'dependabot/**'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # outputs:
  #   fetch-branch-names: ${{steps.fetch-branch-names.outputs.values}}

  # pull_request_target:
  #   - type:
  #       - opened
  #   - branches:
  #       - "dependabot/**"

  # Steps represent a sequence of tasks that will be executed as part of the job
  job1:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.fetch-branch-names.outputs.values}}
    steps:
      - name: Fetch branch names
        id: fetch-branch-names
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const pulls = await github.rest.search.issuesAndPullRequests({
              owner: context.repo.owner,
              repo: 'AlexSCorey/dependabot-test',
              label: 'component:ui',
              label: 'dependencies',
              is: 'pr'
            });

            console.log(pulls,'All Pull requests')

          # const uiBranches=[];
          # const apiBranches = [];
          # let uiPrs = [];
          # let apiPrs=[];

          # for (const pull of pulls) {
          #   const branch = pull['head']['ref'];
          #   let isUIPr = false
          #   let isAPIPr = false
          #   for (const label of pull.labels){
          #     if(label.name == 'component:ui'){
          #       isUIPr = true
          #     }
          #     if(label.name == 'component:api'){
          #       isAPIPr = true
          #     }
          #   }
          #   if (branch.startsWith('dependabot')) {
          #     if(isUIPr){
          #       uiBranches.push(branch)
          #       uiPrs.push('#' + pull['number'] + ' ' + pull['title']);
          #     }

          #     if(isAPIPr){
          #       apiBranches.push(branch)
          #       apiPrs.push('#' + pull['number'] + ' ' + pull['title']);
          #     }
          #   }
          # }

          # if (uiBranches.length == 0  && apiBranches.length == 0) {
          #   core.setFailed('No PRs/branches matched criteria');
          #   return;
          # }

          # const uiPrStrings = uiPrs.join('\n')
          # const apiPrStrings = apiPrs.join('\n')
          # const uiCombinedBranches = uiBranches.join(' ')
          # const apiCombinedBranches = apiBranches.join(' ')

        # echo ::set-output name=values::[{$uiCombinedBranches}];
        # echo '::set-output name=values::{\"values\":[{\"branches\": $uiCombinedBranches, \"prStrings\": $uiPrStrings, \"combinedBranchName\": \"UIDependencyUpgrade\",\"label\": \"component:ui\"}, {\"branches\": $apiCombinedBranches, \"prStrings\": $apiPrStrings, \"combinedBranchName\": \"APIDependencyUpgrade\", \"label\":\"component:api\"}]}'

        # core.setOutput('values', [{branches: uiCombinedBranches, prStrings: uiPrStrings, combinedBranchName: 'UIDependencyUpgrade',label: "component:ui"}, {branches: apiCombinedBranches, prStrings: apiPrStrings, combinedBranchName: 'APIDependencyUpgrade', label:"component:api"}])
        # echo ::set-output name=values::'{values:$uiCombinedBranches}'

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  job2:
    needs: job1
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{needs.job1.outputs.values}}
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # Creates a branch with other PR branches merged together
      - name: Created combined branch
        id: combine-branch-name
        env:
          BASE_BRANCH: devel
          BRANCHES_TO_COMBINE: ${{ matrix.branches }}
          COMBINE_BRANCH_NAME: ${{ matrix.combinedBranchName }}
        run: |
          echo "$BRANCHES_TO_COMBINE"
          sourcebranches="${BRANCHES_TO_COMBINE%\"}"
          sourcebranches="${sourcebranches#\"}"

          basebranch="${BASE_BRANCH%\"}"
          basebranch="${basebranch#\"}"

          git config pull.rebase false
          git config user.name github-actions
          git config user.email github-actions@github.com

          git branch $COMBINE_BRANCH_NAME $basebranch
          git checkout $COMBINE_BRANCH_NAME
          git pull origin $sourcebranches --no-edit
          git push origin $COMBINE_BRANCH_NAME

      - name: Create Combined Pull Request
        uses: actions/github-script@v3
        env:
          BASE_BRANCH: devel
          PR_STRINGS: ${{ matrix.prStrings }}
          COMBINE_BRANCH_NAME: ${{ matrix.combinedBranchName }}
          LABEL: ${{ matrix.label }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const prString = PR_STRINGS
            const body = 'This PR was created by the Combine PRs action by combining the following PRs:\n' + {{PR_STRINGS}};
            await github.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Combined PR',
              head: ${{ env.COMBINE_BRANCH_NAME }},
              base: ${{ env.BASE_BRANCH }},
              body: body
              labels:[${{ env.LABEL }}]
            });
      # - name: Close PRs that were combined
      #   run: |
      #     for (const pr of '${{ steps.fetch-branch-names.outputs.prs}}') {
      #       console.log(pr)
